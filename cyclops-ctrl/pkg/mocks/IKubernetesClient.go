// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/cyclops-ui/cyclops/cyclops-ctrl/internal/models/dto"
	k8sclient "github.com/cyclops-ui/cyclops/cyclops-ctrl/pkg/cluster/k8sclient"

	mock "github.com/stretchr/testify/mock"

	schema "k8s.io/apimachinery/pkg/runtime/schema"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"

	v1 "k8s.io/api/core/v1"

	v1alpha1 "github.com/cyclops-ui/cyclops/cyclops-ctrl/api/v1alpha1"

	version "k8s.io/apimachinery/pkg/version"

	watch "k8s.io/apimachinery/pkg/watch"
)

// IKubernetesClient is an autogenerated mock type for the IKubernetesClient type
type IKubernetesClient struct {
	mock.Mock
}

type IKubernetesClient_Expecter struct {
	mock *mock.Mock
}

func (_m *IKubernetesClient) EXPECT() *IKubernetesClient_Expecter {
	return &IKubernetesClient_Expecter{mock: &_m.Mock}
}

// ApplyCRD provides a mock function with given fields: obj
func (_m *IKubernetesClient) ApplyCRD(obj *unstructured.Unstructured) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for ApplyCRD")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IKubernetesClient_ApplyCRD_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyCRD'
type IKubernetesClient_ApplyCRD_Call struct {
	*mock.Call
}

// ApplyCRD is a helper method to define mock.On call
//   - obj *unstructured.Unstructured
func (_e *IKubernetesClient_Expecter) ApplyCRD(obj interface{}) *IKubernetesClient_ApplyCRD_Call {
	return &IKubernetesClient_ApplyCRD_Call{Call: _e.mock.On("ApplyCRD", obj)}
}

func (_c *IKubernetesClient_ApplyCRD_Call) Run(run func(obj *unstructured.Unstructured)) *IKubernetesClient_ApplyCRD_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*unstructured.Unstructured))
	})
	return _c
}

func (_c *IKubernetesClient_ApplyCRD_Call) Return(_a0 error) *IKubernetesClient_ApplyCRD_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IKubernetesClient_ApplyCRD_Call) RunAndReturn(run func(*unstructured.Unstructured) error) *IKubernetesClient_ApplyCRD_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDynamic provides a mock function with given fields: _a0, _a1, _a2
func (_m *IKubernetesClient) CreateDynamic(_a0 v1alpha1.GroupVersionResource, _a1 *unstructured.Unstructured, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateDynamic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(v1alpha1.GroupVersionResource, *unstructured.Unstructured, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IKubernetesClient_CreateDynamic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDynamic'
type IKubernetesClient_CreateDynamic_Call struct {
	*mock.Call
}

// CreateDynamic is a helper method to define mock.On call
//   - _a0 v1alpha1.GroupVersionResource
//   - _a1 *unstructured.Unstructured
//   - _a2 string
func (_e *IKubernetesClient_Expecter) CreateDynamic(_a0 interface{}, _a1 interface{}, _a2 interface{}) *IKubernetesClient_CreateDynamic_Call {
	return &IKubernetesClient_CreateDynamic_Call{Call: _e.mock.On("CreateDynamic", _a0, _a1, _a2)}
}

func (_c *IKubernetesClient_CreateDynamic_Call) Run(run func(_a0 v1alpha1.GroupVersionResource, _a1 *unstructured.Unstructured, _a2 string)) *IKubernetesClient_CreateDynamic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1alpha1.GroupVersionResource), args[1].(*unstructured.Unstructured), args[2].(string))
	})
	return _c
}

func (_c *IKubernetesClient_CreateDynamic_Call) Return(_a0 error) *IKubernetesClient_CreateDynamic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IKubernetesClient_CreateDynamic_Call) RunAndReturn(run func(v1alpha1.GroupVersionResource, *unstructured.Unstructured, string) error) *IKubernetesClient_CreateDynamic_Call {
	_c.Call.Return(run)
	return _c
}

// CreateModule provides a mock function with given fields: module
func (_m *IKubernetesClient) CreateModule(module v1alpha1.Module) error {
	ret := _m.Called(module)

	if len(ret) == 0 {
		panic("no return value specified for CreateModule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(v1alpha1.Module) error); ok {
		r0 = rf(module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IKubernetesClient_CreateModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateModule'
type IKubernetesClient_CreateModule_Call struct {
	*mock.Call
}

// CreateModule is a helper method to define mock.On call
//   - module v1alpha1.Module
func (_e *IKubernetesClient_Expecter) CreateModule(module interface{}) *IKubernetesClient_CreateModule_Call {
	return &IKubernetesClient_CreateModule_Call{Call: _e.mock.On("CreateModule", module)}
}

func (_c *IKubernetesClient_CreateModule_Call) Run(run func(module v1alpha1.Module)) *IKubernetesClient_CreateModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1alpha1.Module))
	})
	return _c
}

func (_c *IKubernetesClient_CreateModule_Call) Return(_a0 error) *IKubernetesClient_CreateModule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IKubernetesClient_CreateModule_Call) RunAndReturn(run func(v1alpha1.Module) error) *IKubernetesClient_CreateModule_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTemplateStore provides a mock function with given fields: ts
func (_m *IKubernetesClient) CreateTemplateStore(ts *v1alpha1.TemplateStore) error {
	ret := _m.Called(ts)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplateStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.TemplateStore) error); ok {
		r0 = rf(ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IKubernetesClient_CreateTemplateStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTemplateStore'
type IKubernetesClient_CreateTemplateStore_Call struct {
	*mock.Call
}

// CreateTemplateStore is a helper method to define mock.On call
//   - ts *v1alpha1.TemplateStore
func (_e *IKubernetesClient_Expecter) CreateTemplateStore(ts interface{}) *IKubernetesClient_CreateTemplateStore_Call {
	return &IKubernetesClient_CreateTemplateStore_Call{Call: _e.mock.On("CreateTemplateStore", ts)}
}

func (_c *IKubernetesClient_CreateTemplateStore_Call) Run(run func(ts *v1alpha1.TemplateStore)) *IKubernetesClient_CreateTemplateStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1alpha1.TemplateStore))
	})
	return _c
}

func (_c *IKubernetesClient_CreateTemplateStore_Call) Return(_a0 error) *IKubernetesClient_CreateTemplateStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IKubernetesClient_CreateTemplateStore_Call) RunAndReturn(run func(*v1alpha1.TemplateStore) error) *IKubernetesClient_CreateTemplateStore_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: resource
func (_m *IKubernetesClient) Delete(resource dto.Resource) error {
	ret := _m.Called(resource)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.Resource) error); ok {
		r0 = rf(resource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IKubernetesClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IKubernetesClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - resource dto.Resource
func (_e *IKubernetesClient_Expecter) Delete(resource interface{}) *IKubernetesClient_Delete_Call {
	return &IKubernetesClient_Delete_Call{Call: _e.mock.On("Delete", resource)}
}

func (_c *IKubernetesClient_Delete_Call) Run(run func(resource dto.Resource)) *IKubernetesClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.Resource))
	})
	return _c
}

func (_c *IKubernetesClient_Delete_Call) Return(_a0 error) *IKubernetesClient_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IKubernetesClient_Delete_Call) RunAndReturn(run func(dto.Resource) error) *IKubernetesClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteModule provides a mock function with given fields: name
func (_m *IKubernetesClient) DeleteModule(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IKubernetesClient_DeleteModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteModule'
type IKubernetesClient_DeleteModule_Call struct {
	*mock.Call
}

// DeleteModule is a helper method to define mock.On call
//   - name string
func (_e *IKubernetesClient_Expecter) DeleteModule(name interface{}) *IKubernetesClient_DeleteModule_Call {
	return &IKubernetesClient_DeleteModule_Call{Call: _e.mock.On("DeleteModule", name)}
}

func (_c *IKubernetesClient_DeleteModule_Call) Run(run func(name string)) *IKubernetesClient_DeleteModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IKubernetesClient_DeleteModule_Call) Return(_a0 error) *IKubernetesClient_DeleteModule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IKubernetesClient_DeleteModule_Call) RunAndReturn(run func(string) error) *IKubernetesClient_DeleteModule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTemplateStore provides a mock function with given fields: name
func (_m *IKubernetesClient) DeleteTemplateStore(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplateStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IKubernetesClient_DeleteTemplateStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTemplateStore'
type IKubernetesClient_DeleteTemplateStore_Call struct {
	*mock.Call
}

// DeleteTemplateStore is a helper method to define mock.On call
//   - name string
func (_e *IKubernetesClient_Expecter) DeleteTemplateStore(name interface{}) *IKubernetesClient_DeleteTemplateStore_Call {
	return &IKubernetesClient_DeleteTemplateStore_Call{Call: _e.mock.On("DeleteTemplateStore", name)}
}

func (_c *IKubernetesClient_DeleteTemplateStore_Call) Run(run func(name string)) *IKubernetesClient_DeleteTemplateStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IKubernetesClient_DeleteTemplateStore_Call) Return(_a0 error) *IKubernetesClient_DeleteTemplateStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IKubernetesClient_DeleteTemplateStore_Call) RunAndReturn(run func(string) error) *IKubernetesClient_DeleteTemplateStore_Call {
	_c.Call.Return(run)
	return _c
}

// GVKtoAPIResourceName provides a mock function with given fields: gv, kind
func (_m *IKubernetesClient) GVKtoAPIResourceName(gv schema.GroupVersion, kind string) (string, error) {
	ret := _m.Called(gv, kind)

	if len(ret) == 0 {
		panic("no return value specified for GVKtoAPIResourceName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(schema.GroupVersion, string) (string, error)); ok {
		return rf(gv, kind)
	}
	if rf, ok := ret.Get(0).(func(schema.GroupVersion, string) string); ok {
		r0 = rf(gv, kind)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(schema.GroupVersion, string) error); ok {
		r1 = rf(gv, kind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GVKtoAPIResourceName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GVKtoAPIResourceName'
type IKubernetesClient_GVKtoAPIResourceName_Call struct {
	*mock.Call
}

// GVKtoAPIResourceName is a helper method to define mock.On call
//   - gv schema.GroupVersion
//   - kind string
func (_e *IKubernetesClient_Expecter) GVKtoAPIResourceName(gv interface{}, kind interface{}) *IKubernetesClient_GVKtoAPIResourceName_Call {
	return &IKubernetesClient_GVKtoAPIResourceName_Call{Call: _e.mock.On("GVKtoAPIResourceName", gv, kind)}
}

func (_c *IKubernetesClient_GVKtoAPIResourceName_Call) Run(run func(gv schema.GroupVersion, kind string)) *IKubernetesClient_GVKtoAPIResourceName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.GroupVersion), args[1].(string))
	})
	return _c
}

func (_c *IKubernetesClient_GVKtoAPIResourceName_Call) Return(_a0 string, _a1 error) *IKubernetesClient_GVKtoAPIResourceName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GVKtoAPIResourceName_Call) RunAndReturn(run func(schema.GroupVersion, string) (string, error)) *IKubernetesClient_GVKtoAPIResourceName_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeletedResources provides a mock function with given fields: _a0, _a1, _a2
func (_m *IKubernetesClient) GetDeletedResources(_a0 []dto.Resource, _a1 string, _a2 string) ([]dto.Resource, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetDeletedResources")
	}

	var r0 []dto.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func([]dto.Resource, string, string) ([]dto.Resource, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func([]dto.Resource, string, string) []dto.Resource); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func([]dto.Resource, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetDeletedResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeletedResources'
type IKubernetesClient_GetDeletedResources_Call struct {
	*mock.Call
}

// GetDeletedResources is a helper method to define mock.On call
//   - _a0 []dto.Resource
//   - _a1 string
//   - _a2 string
func (_e *IKubernetesClient_Expecter) GetDeletedResources(_a0 interface{}, _a1 interface{}, _a2 interface{}) *IKubernetesClient_GetDeletedResources_Call {
	return &IKubernetesClient_GetDeletedResources_Call{Call: _e.mock.On("GetDeletedResources", _a0, _a1, _a2)}
}

func (_c *IKubernetesClient_GetDeletedResources_Call) Run(run func(_a0 []dto.Resource, _a1 string, _a2 string)) *IKubernetesClient_GetDeletedResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]dto.Resource), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IKubernetesClient_GetDeletedResources_Call) Return(_a0 []dto.Resource, _a1 error) *IKubernetesClient_GetDeletedResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetDeletedResources_Call) RunAndReturn(run func([]dto.Resource, string, string) ([]dto.Resource, error)) *IKubernetesClient_GetDeletedResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeploymentLogs provides a mock function with given fields: namespace, container, deployment, numLogs
func (_m *IKubernetesClient) GetDeploymentLogs(namespace string, container string, deployment string, numLogs *int64) ([]string, error) {
	ret := _m.Called(namespace, container, deployment, numLogs)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentLogs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, *int64) ([]string, error)); ok {
		return rf(namespace, container, deployment, numLogs)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, *int64) []string); ok {
		r0 = rf(namespace, container, deployment, numLogs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, *int64) error); ok {
		r1 = rf(namespace, container, deployment, numLogs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetDeploymentLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeploymentLogs'
type IKubernetesClient_GetDeploymentLogs_Call struct {
	*mock.Call
}

// GetDeploymentLogs is a helper method to define mock.On call
//   - namespace string
//   - container string
//   - deployment string
//   - numLogs *int64
func (_e *IKubernetesClient_Expecter) GetDeploymentLogs(namespace interface{}, container interface{}, deployment interface{}, numLogs interface{}) *IKubernetesClient_GetDeploymentLogs_Call {
	return &IKubernetesClient_GetDeploymentLogs_Call{Call: _e.mock.On("GetDeploymentLogs", namespace, container, deployment, numLogs)}
}

func (_c *IKubernetesClient_GetDeploymentLogs_Call) Run(run func(namespace string, container string, deployment string, numLogs *int64)) *IKubernetesClient_GetDeploymentLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(*int64))
	})
	return _c
}

func (_c *IKubernetesClient_GetDeploymentLogs_Call) Return(_a0 []string, _a1 error) *IKubernetesClient_GetDeploymentLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetDeploymentLogs_Call) RunAndReturn(run func(string, string, string, *int64) ([]string, error)) *IKubernetesClient_GetDeploymentLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetManifest provides a mock function with given fields: group, _a1, kind, name, namespace, includeManagedFields
func (_m *IKubernetesClient) GetManifest(group string, _a1 string, kind string, name string, namespace string, includeManagedFields bool) (string, error) {
	ret := _m.Called(group, _a1, kind, name, namespace, includeManagedFields)

	if len(ret) == 0 {
		panic("no return value specified for GetManifest")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, bool) (string, error)); ok {
		return rf(group, _a1, kind, name, namespace, includeManagedFields)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, bool) string); ok {
		r0 = rf(group, _a1, kind, name, namespace, includeManagedFields)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, bool) error); ok {
		r1 = rf(group, _a1, kind, name, namespace, includeManagedFields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetManifest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManifest'
type IKubernetesClient_GetManifest_Call struct {
	*mock.Call
}

// GetManifest is a helper method to define mock.On call
//   - group string
//   - _a1 string
//   - kind string
//   - name string
//   - namespace string
//   - includeManagedFields bool
func (_e *IKubernetesClient_Expecter) GetManifest(group interface{}, _a1 interface{}, kind interface{}, name interface{}, namespace interface{}, includeManagedFields interface{}) *IKubernetesClient_GetManifest_Call {
	return &IKubernetesClient_GetManifest_Call{Call: _e.mock.On("GetManifest", group, _a1, kind, name, namespace, includeManagedFields)}
}

func (_c *IKubernetesClient_GetManifest_Call) Run(run func(group string, _a1 string, kind string, name string, namespace string, includeManagedFields bool)) *IKubernetesClient_GetManifest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(bool))
	})
	return _c
}

func (_c *IKubernetesClient_GetManifest_Call) Return(_a0 string, _a1 error) *IKubernetesClient_GetManifest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetManifest_Call) RunAndReturn(run func(string, string, string, string, string, bool) (string, error)) *IKubernetesClient_GetManifest_Call {
	_c.Call.Return(run)
	return _c
}

// GetModule provides a mock function with given fields: name
func (_m *IKubernetesClient) GetModule(name string) (*v1alpha1.Module, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetModule")
	}

	var r0 *v1alpha1.Module
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*v1alpha1.Module, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *v1alpha1.Module); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Module)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModule'
type IKubernetesClient_GetModule_Call struct {
	*mock.Call
}

// GetModule is a helper method to define mock.On call
//   - name string
func (_e *IKubernetesClient_Expecter) GetModule(name interface{}) *IKubernetesClient_GetModule_Call {
	return &IKubernetesClient_GetModule_Call{Call: _e.mock.On("GetModule", name)}
}

func (_c *IKubernetesClient_GetModule_Call) Run(run func(name string)) *IKubernetesClient_GetModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IKubernetesClient_GetModule_Call) Return(_a0 *v1alpha1.Module, _a1 error) *IKubernetesClient_GetModule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetModule_Call) RunAndReturn(run func(string) (*v1alpha1.Module, error)) *IKubernetesClient_GetModule_Call {
	_c.Call.Return(run)
	return _c
}

// GetModuleResourcesHealth provides a mock function with given fields: name
func (_m *IKubernetesClient) GetModuleResourcesHealth(name string) (string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleResourcesHealth")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetModuleResourcesHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModuleResourcesHealth'
type IKubernetesClient_GetModuleResourcesHealth_Call struct {
	*mock.Call
}

// GetModuleResourcesHealth is a helper method to define mock.On call
//   - name string
func (_e *IKubernetesClient_Expecter) GetModuleResourcesHealth(name interface{}) *IKubernetesClient_GetModuleResourcesHealth_Call {
	return &IKubernetesClient_GetModuleResourcesHealth_Call{Call: _e.mock.On("GetModuleResourcesHealth", name)}
}

func (_c *IKubernetesClient_GetModuleResourcesHealth_Call) Run(run func(name string)) *IKubernetesClient_GetModuleResourcesHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IKubernetesClient_GetModuleResourcesHealth_Call) Return(_a0 string, _a1 error) *IKubernetesClient_GetModuleResourcesHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetModuleResourcesHealth_Call) RunAndReturn(run func(string) (string, error)) *IKubernetesClient_GetModuleResourcesHealth_Call {
	_c.Call.Return(run)
	return _c
}

// GetNode provides a mock function with given fields: name
func (_m *IKubernetesClient) GetNode(name string) (*v1.Node, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 *v1.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*v1.Node, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *v1.Node); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type IKubernetesClient_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
//   - name string
func (_e *IKubernetesClient_Expecter) GetNode(name interface{}) *IKubernetesClient_GetNode_Call {
	return &IKubernetesClient_GetNode_Call{Call: _e.mock.On("GetNode", name)}
}

func (_c *IKubernetesClient_GetNode_Call) Run(run func(name string)) *IKubernetesClient_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IKubernetesClient_GetNode_Call) Return(_a0 *v1.Node, _a1 error) *IKubernetesClient_GetNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetNode_Call) RunAndReturn(run func(string) (*v1.Node, error)) *IKubernetesClient_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetPodLogs provides a mock function with given fields: namespace, container, name, numLogs
func (_m *IKubernetesClient) GetPodLogs(namespace string, container string, name string, numLogs *int64) ([]string, error) {
	ret := _m.Called(namespace, container, name, numLogs)

	if len(ret) == 0 {
		panic("no return value specified for GetPodLogs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, *int64) ([]string, error)); ok {
		return rf(namespace, container, name, numLogs)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, *int64) []string); ok {
		r0 = rf(namespace, container, name, numLogs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, *int64) error); ok {
		r1 = rf(namespace, container, name, numLogs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetPodLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPodLogs'
type IKubernetesClient_GetPodLogs_Call struct {
	*mock.Call
}

// GetPodLogs is a helper method to define mock.On call
//   - namespace string
//   - container string
//   - name string
//   - numLogs *int64
func (_e *IKubernetesClient_Expecter) GetPodLogs(namespace interface{}, container interface{}, name interface{}, numLogs interface{}) *IKubernetesClient_GetPodLogs_Call {
	return &IKubernetesClient_GetPodLogs_Call{Call: _e.mock.On("GetPodLogs", namespace, container, name, numLogs)}
}

func (_c *IKubernetesClient_GetPodLogs_Call) Run(run func(namespace string, container string, name string, numLogs *int64)) *IKubernetesClient_GetPodLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(*int64))
	})
	return _c
}

func (_c *IKubernetesClient_GetPodLogs_Call) Return(_a0 []string, _a1 error) *IKubernetesClient_GetPodLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetPodLogs_Call) RunAndReturn(run func(string, string, string, *int64) ([]string, error)) *IKubernetesClient_GetPodLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetPodsForNode provides a mock function with given fields: nodeName
func (_m *IKubernetesClient) GetPodsForNode(nodeName string) ([]v1.Pod, error) {
	ret := _m.Called(nodeName)

	if len(ret) == 0 {
		panic("no return value specified for GetPodsForNode")
	}

	var r0 []v1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]v1.Pod, error)); ok {
		return rf(nodeName)
	}
	if rf, ok := ret.Get(0).(func(string) []v1.Pod); ok {
		r0 = rf(nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nodeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetPodsForNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPodsForNode'
type IKubernetesClient_GetPodsForNode_Call struct {
	*mock.Call
}

// GetPodsForNode is a helper method to define mock.On call
//   - nodeName string
func (_e *IKubernetesClient_Expecter) GetPodsForNode(nodeName interface{}) *IKubernetesClient_GetPodsForNode_Call {
	return &IKubernetesClient_GetPodsForNode_Call{Call: _e.mock.On("GetPodsForNode", nodeName)}
}

func (_c *IKubernetesClient_GetPodsForNode_Call) Run(run func(nodeName string)) *IKubernetesClient_GetPodsForNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IKubernetesClient_GetPodsForNode_Call) Return(_a0 []v1.Pod, _a1 error) *IKubernetesClient_GetPodsForNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetPodsForNode_Call) RunAndReturn(run func(string) ([]v1.Pod, error)) *IKubernetesClient_GetPodsForNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetResource provides a mock function with given fields: group, _a1, kind, name, namespace
func (_m *IKubernetesClient) GetResource(group string, _a1 string, kind string, name string, namespace string) (any, error) {
	ret := _m.Called(group, _a1, kind, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetResource")
	}

	var r0 any
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) (any, error)); ok {
		return rf(group, _a1, kind, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) any); ok {
		r0 = rf(group, _a1, kind, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = rf(group, _a1, kind, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResource'
type IKubernetesClient_GetResource_Call struct {
	*mock.Call
}

// GetResource is a helper method to define mock.On call
//   - group string
//   - _a1 string
//   - kind string
//   - name string
//   - namespace string
func (_e *IKubernetesClient_Expecter) GetResource(group interface{}, _a1 interface{}, kind interface{}, name interface{}, namespace interface{}) *IKubernetesClient_GetResource_Call {
	return &IKubernetesClient_GetResource_Call{Call: _e.mock.On("GetResource", group, _a1, kind, name, namespace)}
}

func (_c *IKubernetesClient_GetResource_Call) Run(run func(group string, _a1 string, kind string, name string, namespace string)) *IKubernetesClient_GetResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *IKubernetesClient_GetResource_Call) Return(_a0 any, _a1 error) *IKubernetesClient_GetResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetResource_Call) RunAndReturn(run func(string, string, string, string, string) (any, error)) *IKubernetesClient_GetResource_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourcesForModule provides a mock function with given fields: name
func (_m *IKubernetesClient) GetResourcesForModule(name string) ([]dto.Resource, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesForModule")
	}

	var r0 []dto.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]dto.Resource, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.Resource); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetResourcesForModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcesForModule'
type IKubernetesClient_GetResourcesForModule_Call struct {
	*mock.Call
}

// GetResourcesForModule is a helper method to define mock.On call
//   - name string
func (_e *IKubernetesClient_Expecter) GetResourcesForModule(name interface{}) *IKubernetesClient_GetResourcesForModule_Call {
	return &IKubernetesClient_GetResourcesForModule_Call{Call: _e.mock.On("GetResourcesForModule", name)}
}

func (_c *IKubernetesClient_GetResourcesForModule_Call) Run(run func(name string)) *IKubernetesClient_GetResourcesForModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IKubernetesClient_GetResourcesForModule_Call) Return(_a0 []dto.Resource, _a1 error) *IKubernetesClient_GetResourcesForModule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetResourcesForModule_Call) RunAndReturn(run func(string) ([]dto.Resource, error)) *IKubernetesClient_GetResourcesForModule_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourcesForRelease provides a mock function with given fields: release
func (_m *IKubernetesClient) GetResourcesForRelease(release string) ([]dto.Resource, error) {
	ret := _m.Called(release)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesForRelease")
	}

	var r0 []dto.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]dto.Resource, error)); ok {
		return rf(release)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.Resource); ok {
		r0 = rf(release)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(release)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetResourcesForRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourcesForRelease'
type IKubernetesClient_GetResourcesForRelease_Call struct {
	*mock.Call
}

// GetResourcesForRelease is a helper method to define mock.On call
//   - release string
func (_e *IKubernetesClient_Expecter) GetResourcesForRelease(release interface{}) *IKubernetesClient_GetResourcesForRelease_Call {
	return &IKubernetesClient_GetResourcesForRelease_Call{Call: _e.mock.On("GetResourcesForRelease", release)}
}

func (_c *IKubernetesClient_GetResourcesForRelease_Call) Run(run func(release string)) *IKubernetesClient_GetResourcesForRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IKubernetesClient_GetResourcesForRelease_Call) Return(_a0 []dto.Resource, _a1 error) *IKubernetesClient_GetResourcesForRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetResourcesForRelease_Call) RunAndReturn(run func(string) ([]dto.Resource, error)) *IKubernetesClient_GetResourcesForRelease_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatefulSetsLogs provides a mock function with given fields: namespace, container, name, numLogs
func (_m *IKubernetesClient) GetStatefulSetsLogs(namespace string, container string, name string, numLogs *int64) ([]string, error) {
	ret := _m.Called(namespace, container, name, numLogs)

	if len(ret) == 0 {
		panic("no return value specified for GetStatefulSetsLogs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, *int64) ([]string, error)); ok {
		return rf(namespace, container, name, numLogs)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, *int64) []string); ok {
		r0 = rf(namespace, container, name, numLogs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, *int64) error); ok {
		r1 = rf(namespace, container, name, numLogs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetStatefulSetsLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatefulSetsLogs'
type IKubernetesClient_GetStatefulSetsLogs_Call struct {
	*mock.Call
}

// GetStatefulSetsLogs is a helper method to define mock.On call
//   - namespace string
//   - container string
//   - name string
//   - numLogs *int64
func (_e *IKubernetesClient_Expecter) GetStatefulSetsLogs(namespace interface{}, container interface{}, name interface{}, numLogs interface{}) *IKubernetesClient_GetStatefulSetsLogs_Call {
	return &IKubernetesClient_GetStatefulSetsLogs_Call{Call: _e.mock.On("GetStatefulSetsLogs", namespace, container, name, numLogs)}
}

func (_c *IKubernetesClient_GetStatefulSetsLogs_Call) Run(run func(namespace string, container string, name string, numLogs *int64)) *IKubernetesClient_GetStatefulSetsLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(*int64))
	})
	return _c
}

func (_c *IKubernetesClient_GetStatefulSetsLogs_Call) Return(_a0 []string, _a1 error) *IKubernetesClient_GetStatefulSetsLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetStatefulSetsLogs_Call) RunAndReturn(run func(string, string, string, *int64) ([]string, error)) *IKubernetesClient_GetStatefulSetsLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamedPodLogs provides a mock function with given fields: ctx, namespace, container, name, logCount, logChan
func (_m *IKubernetesClient) GetStreamedPodLogs(ctx context.Context, namespace string, container string, name string, logCount *int64, logChan chan<- string) error {
	ret := _m.Called(ctx, namespace, container, name, logCount, logChan)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamedPodLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *int64, chan<- string) error); ok {
		r0 = rf(ctx, namespace, container, name, logCount, logChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IKubernetesClient_GetStreamedPodLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamedPodLogs'
type IKubernetesClient_GetStreamedPodLogs_Call struct {
	*mock.Call
}

// GetStreamedPodLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - container string
//   - name string
//   - logCount *int64
//   - logChan chan<- string
func (_e *IKubernetesClient_Expecter) GetStreamedPodLogs(ctx interface{}, namespace interface{}, container interface{}, name interface{}, logCount interface{}, logChan interface{}) *IKubernetesClient_GetStreamedPodLogs_Call {
	return &IKubernetesClient_GetStreamedPodLogs_Call{Call: _e.mock.On("GetStreamedPodLogs", ctx, namespace, container, name, logCount, logChan)}
}

func (_c *IKubernetesClient_GetStreamedPodLogs_Call) Run(run func(ctx context.Context, namespace string, container string, name string, logCount *int64, logChan chan<- string)) *IKubernetesClient_GetStreamedPodLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*int64), args[5].(chan<- string))
	})
	return _c
}

func (_c *IKubernetesClient_GetStreamedPodLogs_Call) Return(_a0 error) *IKubernetesClient_GetStreamedPodLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IKubernetesClient_GetStreamedPodLogs_Call) RunAndReturn(run func(context.Context, string, string, string, *int64, chan<- string) error) *IKubernetesClient_GetStreamedPodLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplateAuthRuleSecret provides a mock function with given fields: name, key
func (_m *IKubernetesClient) GetTemplateAuthRuleSecret(name string, key string) (string, error) {
	ret := _m.Called(name, key)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplateAuthRuleSecret")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(name, key)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(name, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetTemplateAuthRuleSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplateAuthRuleSecret'
type IKubernetesClient_GetTemplateAuthRuleSecret_Call struct {
	*mock.Call
}

// GetTemplateAuthRuleSecret is a helper method to define mock.On call
//   - name string
//   - key string
func (_e *IKubernetesClient_Expecter) GetTemplateAuthRuleSecret(name interface{}, key interface{}) *IKubernetesClient_GetTemplateAuthRuleSecret_Call {
	return &IKubernetesClient_GetTemplateAuthRuleSecret_Call{Call: _e.mock.On("GetTemplateAuthRuleSecret", name, key)}
}

func (_c *IKubernetesClient_GetTemplateAuthRuleSecret_Call) Run(run func(name string, key string)) *IKubernetesClient_GetTemplateAuthRuleSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IKubernetesClient_GetTemplateAuthRuleSecret_Call) Return(_a0 string, _a1 error) *IKubernetesClient_GetTemplateAuthRuleSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetTemplateAuthRuleSecret_Call) RunAndReturn(run func(string, string) (string, error)) *IKubernetesClient_GetTemplateAuthRuleSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkloadsForModule provides a mock function with given fields: name
func (_m *IKubernetesClient) GetWorkloadsForModule(name string) ([]dto.Resource, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkloadsForModule")
	}

	var r0 []dto.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]dto.Resource, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.Resource); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetWorkloadsForModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkloadsForModule'
type IKubernetesClient_GetWorkloadsForModule_Call struct {
	*mock.Call
}

// GetWorkloadsForModule is a helper method to define mock.On call
//   - name string
func (_e *IKubernetesClient_Expecter) GetWorkloadsForModule(name interface{}) *IKubernetesClient_GetWorkloadsForModule_Call {
	return &IKubernetesClient_GetWorkloadsForModule_Call{Call: _e.mock.On("GetWorkloadsForModule", name)}
}

func (_c *IKubernetesClient_GetWorkloadsForModule_Call) Run(run func(name string)) *IKubernetesClient_GetWorkloadsForModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IKubernetesClient_GetWorkloadsForModule_Call) Return(_a0 []dto.Resource, _a1 error) *IKubernetesClient_GetWorkloadsForModule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetWorkloadsForModule_Call) RunAndReturn(run func(string) ([]dto.Resource, error)) *IKubernetesClient_GetWorkloadsForModule_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkloadsForRelease provides a mock function with given fields: name
func (_m *IKubernetesClient) GetWorkloadsForRelease(name string) ([]dto.Resource, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkloadsForRelease")
	}

	var r0 []dto.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]dto.Resource, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.Resource); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_GetWorkloadsForRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkloadsForRelease'
type IKubernetesClient_GetWorkloadsForRelease_Call struct {
	*mock.Call
}

// GetWorkloadsForRelease is a helper method to define mock.On call
//   - name string
func (_e *IKubernetesClient_Expecter) GetWorkloadsForRelease(name interface{}) *IKubernetesClient_GetWorkloadsForRelease_Call {
	return &IKubernetesClient_GetWorkloadsForRelease_Call{Call: _e.mock.On("GetWorkloadsForRelease", name)}
}

func (_c *IKubernetesClient_GetWorkloadsForRelease_Call) Run(run func(name string)) *IKubernetesClient_GetWorkloadsForRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IKubernetesClient_GetWorkloadsForRelease_Call) Return(_a0 []dto.Resource, _a1 error) *IKubernetesClient_GetWorkloadsForRelease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_GetWorkloadsForRelease_Call) RunAndReturn(run func(string) ([]dto.Resource, error)) *IKubernetesClient_GetWorkloadsForRelease_Call {
	_c.Call.Return(run)
	return _c
}

// ListModules provides a mock function with given fields:
func (_m *IKubernetesClient) ListModules() ([]v1alpha1.Module, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListModules")
	}

	var r0 []v1alpha1.Module
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]v1alpha1.Module, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []v1alpha1.Module); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1alpha1.Module)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_ListModules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListModules'
type IKubernetesClient_ListModules_Call struct {
	*mock.Call
}

// ListModules is a helper method to define mock.On call
func (_e *IKubernetesClient_Expecter) ListModules() *IKubernetesClient_ListModules_Call {
	return &IKubernetesClient_ListModules_Call{Call: _e.mock.On("ListModules")}
}

func (_c *IKubernetesClient_ListModules_Call) Run(run func()) *IKubernetesClient_ListModules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IKubernetesClient_ListModules_Call) Return(_a0 []v1alpha1.Module, _a1 error) *IKubernetesClient_ListModules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_ListModules_Call) RunAndReturn(run func() ([]v1alpha1.Module, error)) *IKubernetesClient_ListModules_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamespaces provides a mock function with given fields:
func (_m *IKubernetesClient) ListNamespaces() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_ListNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamespaces'
type IKubernetesClient_ListNamespaces_Call struct {
	*mock.Call
}

// ListNamespaces is a helper method to define mock.On call
func (_e *IKubernetesClient_Expecter) ListNamespaces() *IKubernetesClient_ListNamespaces_Call {
	return &IKubernetesClient_ListNamespaces_Call{Call: _e.mock.On("ListNamespaces")}
}

func (_c *IKubernetesClient_ListNamespaces_Call) Run(run func()) *IKubernetesClient_ListNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IKubernetesClient_ListNamespaces_Call) Return(_a0 []string, _a1 error) *IKubernetesClient_ListNamespaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_ListNamespaces_Call) RunAndReturn(run func() ([]string, error)) *IKubernetesClient_ListNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function with given fields:
func (_m *IKubernetesClient) ListNodes() ([]v1.Node, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 []v1.Node
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]v1.Node, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []v1.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Node)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type IKubernetesClient_ListNodes_Call struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
func (_e *IKubernetesClient_Expecter) ListNodes() *IKubernetesClient_ListNodes_Call {
	return &IKubernetesClient_ListNodes_Call{Call: _e.mock.On("ListNodes")}
}

func (_c *IKubernetesClient_ListNodes_Call) Run(run func()) *IKubernetesClient_ListNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IKubernetesClient_ListNodes_Call) Return(_a0 []v1.Node, _a1 error) *IKubernetesClient_ListNodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_ListNodes_Call) RunAndReturn(run func() ([]v1.Node, error)) *IKubernetesClient_ListNodes_Call {
	_c.Call.Return(run)
	return _c
}

// ListTemplateAuthRules provides a mock function with given fields:
func (_m *IKubernetesClient) ListTemplateAuthRules() ([]v1alpha1.TemplateAuthRule, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListTemplateAuthRules")
	}

	var r0 []v1alpha1.TemplateAuthRule
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]v1alpha1.TemplateAuthRule, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []v1alpha1.TemplateAuthRule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1alpha1.TemplateAuthRule)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_ListTemplateAuthRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTemplateAuthRules'
type IKubernetesClient_ListTemplateAuthRules_Call struct {
	*mock.Call
}

// ListTemplateAuthRules is a helper method to define mock.On call
func (_e *IKubernetesClient_Expecter) ListTemplateAuthRules() *IKubernetesClient_ListTemplateAuthRules_Call {
	return &IKubernetesClient_ListTemplateAuthRules_Call{Call: _e.mock.On("ListTemplateAuthRules")}
}

func (_c *IKubernetesClient_ListTemplateAuthRules_Call) Run(run func()) *IKubernetesClient_ListTemplateAuthRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IKubernetesClient_ListTemplateAuthRules_Call) Return(_a0 []v1alpha1.TemplateAuthRule, _a1 error) *IKubernetesClient_ListTemplateAuthRules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_ListTemplateAuthRules_Call) RunAndReturn(run func() ([]v1alpha1.TemplateAuthRule, error)) *IKubernetesClient_ListTemplateAuthRules_Call {
	_c.Call.Return(run)
	return _c
}

// ListTemplateStore provides a mock function with given fields:
func (_m *IKubernetesClient) ListTemplateStore() ([]v1alpha1.TemplateStore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListTemplateStore")
	}

	var r0 []v1alpha1.TemplateStore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]v1alpha1.TemplateStore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []v1alpha1.TemplateStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1alpha1.TemplateStore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_ListTemplateStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTemplateStore'
type IKubernetesClient_ListTemplateStore_Call struct {
	*mock.Call
}

// ListTemplateStore is a helper method to define mock.On call
func (_e *IKubernetesClient_Expecter) ListTemplateStore() *IKubernetesClient_ListTemplateStore_Call {
	return &IKubernetesClient_ListTemplateStore_Call{Call: _e.mock.On("ListTemplateStore")}
}

func (_c *IKubernetesClient_ListTemplateStore_Call) Run(run func()) *IKubernetesClient_ListTemplateStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IKubernetesClient_ListTemplateStore_Call) Return(_a0 []v1alpha1.TemplateStore, _a1 error) *IKubernetesClient_ListTemplateStore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_ListTemplateStore_Call) RunAndReturn(run func() ([]v1alpha1.TemplateStore, error)) *IKubernetesClient_ListTemplateStore_Call {
	_c.Call.Return(run)
	return _c
}

// Restart provides a mock function with given fields: group, _a1, kind, name, namespace
func (_m *IKubernetesClient) Restart(group string, _a1 string, kind string, name string, namespace string) error {
	ret := _m.Called(group, _a1, kind, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for Restart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(group, _a1, kind, name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IKubernetesClient_Restart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restart'
type IKubernetesClient_Restart_Call struct {
	*mock.Call
}

// Restart is a helper method to define mock.On call
//   - group string
//   - _a1 string
//   - kind string
//   - name string
//   - namespace string
func (_e *IKubernetesClient_Expecter) Restart(group interface{}, _a1 interface{}, kind interface{}, name interface{}, namespace interface{}) *IKubernetesClient_Restart_Call {
	return &IKubernetesClient_Restart_Call{Call: _e.mock.On("Restart", group, _a1, kind, name, namespace)}
}

func (_c *IKubernetesClient_Restart_Call) Run(run func(group string, _a1 string, kind string, name string, namespace string)) *IKubernetesClient_Restart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *IKubernetesClient_Restart_Call) Return(_a0 error) *IKubernetesClient_Restart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IKubernetesClient_Restart_Call) RunAndReturn(run func(string, string, string, string, string) error) *IKubernetesClient_Restart_Call {
	_c.Call.Return(run)
	return _c
}

// RestartDaemonSet provides a mock function with given fields: name, namespace
func (_m *IKubernetesClient) RestartDaemonSet(name string, namespace string) error {
	ret := _m.Called(name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for RestartDaemonSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IKubernetesClient_RestartDaemonSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestartDaemonSet'
type IKubernetesClient_RestartDaemonSet_Call struct {
	*mock.Call
}

// RestartDaemonSet is a helper method to define mock.On call
//   - name string
//   - namespace string
func (_e *IKubernetesClient_Expecter) RestartDaemonSet(name interface{}, namespace interface{}) *IKubernetesClient_RestartDaemonSet_Call {
	return &IKubernetesClient_RestartDaemonSet_Call{Call: _e.mock.On("RestartDaemonSet", name, namespace)}
}

func (_c *IKubernetesClient_RestartDaemonSet_Call) Run(run func(name string, namespace string)) *IKubernetesClient_RestartDaemonSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IKubernetesClient_RestartDaemonSet_Call) Return(_a0 error) *IKubernetesClient_RestartDaemonSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IKubernetesClient_RestartDaemonSet_Call) RunAndReturn(run func(string, string) error) *IKubernetesClient_RestartDaemonSet_Call {
	_c.Call.Return(run)
	return _c
}

// RestartDeployment provides a mock function with given fields: name, namespace
func (_m *IKubernetesClient) RestartDeployment(name string, namespace string) error {
	ret := _m.Called(name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for RestartDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IKubernetesClient_RestartDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestartDeployment'
type IKubernetesClient_RestartDeployment_Call struct {
	*mock.Call
}

// RestartDeployment is a helper method to define mock.On call
//   - name string
//   - namespace string
func (_e *IKubernetesClient_Expecter) RestartDeployment(name interface{}, namespace interface{}) *IKubernetesClient_RestartDeployment_Call {
	return &IKubernetesClient_RestartDeployment_Call{Call: _e.mock.On("RestartDeployment", name, namespace)}
}

func (_c *IKubernetesClient_RestartDeployment_Call) Run(run func(name string, namespace string)) *IKubernetesClient_RestartDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IKubernetesClient_RestartDeployment_Call) Return(_a0 error) *IKubernetesClient_RestartDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IKubernetesClient_RestartDeployment_Call) RunAndReturn(run func(string, string) error) *IKubernetesClient_RestartDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// RestartStatefulSet provides a mock function with given fields: name, namespace
func (_m *IKubernetesClient) RestartStatefulSet(name string, namespace string) error {
	ret := _m.Called(name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for RestartStatefulSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IKubernetesClient_RestartStatefulSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestartStatefulSet'
type IKubernetesClient_RestartStatefulSet_Call struct {
	*mock.Call
}

// RestartStatefulSet is a helper method to define mock.On call
//   - name string
//   - namespace string
func (_e *IKubernetesClient_Expecter) RestartStatefulSet(name interface{}, namespace interface{}) *IKubernetesClient_RestartStatefulSet_Call {
	return &IKubernetesClient_RestartStatefulSet_Call{Call: _e.mock.On("RestartStatefulSet", name, namespace)}
}

func (_c *IKubernetesClient_RestartStatefulSet_Call) Run(run func(name string, namespace string)) *IKubernetesClient_RestartStatefulSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IKubernetesClient_RestartStatefulSet_Call) Return(_a0 error) *IKubernetesClient_RestartStatefulSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IKubernetesClient_RestartStatefulSet_Call) RunAndReturn(run func(string, string) error) *IKubernetesClient_RestartStatefulSet_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateModule provides a mock function with given fields: module
func (_m *IKubernetesClient) UpdateModule(module *v1alpha1.Module) error {
	ret := _m.Called(module)

	if len(ret) == 0 {
		panic("no return value specified for UpdateModule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Module) error); ok {
		r0 = rf(module)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IKubernetesClient_UpdateModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateModule'
type IKubernetesClient_UpdateModule_Call struct {
	*mock.Call
}

// UpdateModule is a helper method to define mock.On call
//   - module *v1alpha1.Module
func (_e *IKubernetesClient_Expecter) UpdateModule(module interface{}) *IKubernetesClient_UpdateModule_Call {
	return &IKubernetesClient_UpdateModule_Call{Call: _e.mock.On("UpdateModule", module)}
}

func (_c *IKubernetesClient_UpdateModule_Call) Run(run func(module *v1alpha1.Module)) *IKubernetesClient_UpdateModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1alpha1.Module))
	})
	return _c
}

func (_c *IKubernetesClient_UpdateModule_Call) Return(_a0 error) *IKubernetesClient_UpdateModule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IKubernetesClient_UpdateModule_Call) RunAndReturn(run func(*v1alpha1.Module) error) *IKubernetesClient_UpdateModule_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateModuleStatus provides a mock function with given fields: module
func (_m *IKubernetesClient) UpdateModuleStatus(module *v1alpha1.Module) (*v1alpha1.Module, error) {
	ret := _m.Called(module)

	if len(ret) == 0 {
		panic("no return value specified for UpdateModuleStatus")
	}

	var r0 *v1alpha1.Module
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Module) (*v1alpha1.Module, error)); ok {
		return rf(module)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha1.Module) *v1alpha1.Module); ok {
		r0 = rf(module)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Module)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1alpha1.Module) error); ok {
		r1 = rf(module)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_UpdateModuleStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateModuleStatus'
type IKubernetesClient_UpdateModuleStatus_Call struct {
	*mock.Call
}

// UpdateModuleStatus is a helper method to define mock.On call
//   - module *v1alpha1.Module
func (_e *IKubernetesClient_Expecter) UpdateModuleStatus(module interface{}) *IKubernetesClient_UpdateModuleStatus_Call {
	return &IKubernetesClient_UpdateModuleStatus_Call{Call: _e.mock.On("UpdateModuleStatus", module)}
}

func (_c *IKubernetesClient_UpdateModuleStatus_Call) Run(run func(module *v1alpha1.Module)) *IKubernetesClient_UpdateModuleStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1alpha1.Module))
	})
	return _c
}

func (_c *IKubernetesClient_UpdateModuleStatus_Call) Return(_a0 *v1alpha1.Module, _a1 error) *IKubernetesClient_UpdateModuleStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_UpdateModuleStatus_Call) RunAndReturn(run func(*v1alpha1.Module) (*v1alpha1.Module, error)) *IKubernetesClient_UpdateModuleStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTemplateStore provides a mock function with given fields: ts
func (_m *IKubernetesClient) UpdateTemplateStore(ts *v1alpha1.TemplateStore) error {
	ret := _m.Called(ts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTemplateStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.TemplateStore) error); ok {
		r0 = rf(ts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IKubernetesClient_UpdateTemplateStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTemplateStore'
type IKubernetesClient_UpdateTemplateStore_Call struct {
	*mock.Call
}

// UpdateTemplateStore is a helper method to define mock.On call
//   - ts *v1alpha1.TemplateStore
func (_e *IKubernetesClient_Expecter) UpdateTemplateStore(ts interface{}) *IKubernetesClient_UpdateTemplateStore_Call {
	return &IKubernetesClient_UpdateTemplateStore_Call{Call: _e.mock.On("UpdateTemplateStore", ts)}
}

func (_c *IKubernetesClient_UpdateTemplateStore_Call) Run(run func(ts *v1alpha1.TemplateStore)) *IKubernetesClient_UpdateTemplateStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1alpha1.TemplateStore))
	})
	return _c
}

func (_c *IKubernetesClient_UpdateTemplateStore_Call) Return(_a0 error) *IKubernetesClient_UpdateTemplateStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IKubernetesClient_UpdateTemplateStore_Call) RunAndReturn(run func(*v1alpha1.TemplateStore) error) *IKubernetesClient_UpdateTemplateStore_Call {
	_c.Call.Return(run)
	return _c
}

// VersionInfo provides a mock function with given fields:
func (_m *IKubernetesClient) VersionInfo() (*version.Info, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VersionInfo")
	}

	var r0 *version.Info
	var r1 error
	if rf, ok := ret.Get(0).(func() (*version.Info, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *version.Info); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*version.Info)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_VersionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VersionInfo'
type IKubernetesClient_VersionInfo_Call struct {
	*mock.Call
}

// VersionInfo is a helper method to define mock.On call
func (_e *IKubernetesClient_Expecter) VersionInfo() *IKubernetesClient_VersionInfo_Call {
	return &IKubernetesClient_VersionInfo_Call{Call: _e.mock.On("VersionInfo")}
}

func (_c *IKubernetesClient_VersionInfo_Call) Run(run func()) *IKubernetesClient_VersionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IKubernetesClient_VersionInfo_Call) Return(_a0 *version.Info, _a1 error) *IKubernetesClient_VersionInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_VersionInfo_Call) RunAndReturn(run func() (*version.Info, error)) *IKubernetesClient_VersionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// WatchKubernetesResources provides a mock function with given fields: gvrs, stopCh
func (_m *IKubernetesClient) WatchKubernetesResources(gvrs []k8sclient.ResourceWatchSpec, stopCh chan struct{}) (chan *unstructured.Unstructured, error) {
	ret := _m.Called(gvrs, stopCh)

	if len(ret) == 0 {
		panic("no return value specified for WatchKubernetesResources")
	}

	var r0 chan *unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func([]k8sclient.ResourceWatchSpec, chan struct{}) (chan *unstructured.Unstructured, error)); ok {
		return rf(gvrs, stopCh)
	}
	if rf, ok := ret.Get(0).(func([]k8sclient.ResourceWatchSpec, chan struct{}) chan *unstructured.Unstructured); ok {
		r0 = rf(gvrs, stopCh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func([]k8sclient.ResourceWatchSpec, chan struct{}) error); ok {
		r1 = rf(gvrs, stopCh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_WatchKubernetesResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchKubernetesResources'
type IKubernetesClient_WatchKubernetesResources_Call struct {
	*mock.Call
}

// WatchKubernetesResources is a helper method to define mock.On call
//   - gvrs []k8sclient.ResourceWatchSpec
//   - stopCh chan struct{}
func (_e *IKubernetesClient_Expecter) WatchKubernetesResources(gvrs interface{}, stopCh interface{}) *IKubernetesClient_WatchKubernetesResources_Call {
	return &IKubernetesClient_WatchKubernetesResources_Call{Call: _e.mock.On("WatchKubernetesResources", gvrs, stopCh)}
}

func (_c *IKubernetesClient_WatchKubernetesResources_Call) Run(run func(gvrs []k8sclient.ResourceWatchSpec, stopCh chan struct{})) *IKubernetesClient_WatchKubernetesResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]k8sclient.ResourceWatchSpec), args[1].(chan struct{}))
	})
	return _c
}

func (_c *IKubernetesClient_WatchKubernetesResources_Call) Return(_a0 chan *unstructured.Unstructured, _a1 error) *IKubernetesClient_WatchKubernetesResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_WatchKubernetesResources_Call) RunAndReturn(run func([]k8sclient.ResourceWatchSpec, chan struct{}) (chan *unstructured.Unstructured, error)) *IKubernetesClient_WatchKubernetesResources_Call {
	_c.Call.Return(run)
	return _c
}

// WatchResource provides a mock function with given fields: group, _a1, resource, name, namespace
func (_m *IKubernetesClient) WatchResource(group string, _a1 string, resource string, name string, namespace string) (watch.Interface, error) {
	ret := _m.Called(group, _a1, resource, name, namespace)

	if len(ret) == 0 {
		panic("no return value specified for WatchResource")
	}

	var r0 watch.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) (watch.Interface, error)); ok {
		return rf(group, _a1, resource, name, namespace)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) watch.Interface); ok {
		r0 = rf(group, _a1, resource, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = rf(group, _a1, resource, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IKubernetesClient_WatchResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchResource'
type IKubernetesClient_WatchResource_Call struct {
	*mock.Call
}

// WatchResource is a helper method to define mock.On call
//   - group string
//   - _a1 string
//   - resource string
//   - name string
//   - namespace string
func (_e *IKubernetesClient_Expecter) WatchResource(group interface{}, _a1 interface{}, resource interface{}, name interface{}, namespace interface{}) *IKubernetesClient_WatchResource_Call {
	return &IKubernetesClient_WatchResource_Call{Call: _e.mock.On("WatchResource", group, _a1, resource, name, namespace)}
}

func (_c *IKubernetesClient_WatchResource_Call) Run(run func(group string, _a1 string, resource string, name string, namespace string)) *IKubernetesClient_WatchResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *IKubernetesClient_WatchResource_Call) Return(_a0 watch.Interface, _a1 error) *IKubernetesClient_WatchResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IKubernetesClient_WatchResource_Call) RunAndReturn(run func(string, string, string, string, string) (watch.Interface, error)) *IKubernetesClient_WatchResource_Call {
	_c.Call.Return(run)
	return _c
}

// NewIKubernetesClient creates a new instance of IKubernetesClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIKubernetesClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IKubernetesClient {
	mock := &IKubernetesClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
